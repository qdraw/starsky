parameters:
  runtimeArg: '--runtime="linux-arm,linux-arm64"'
  jest: true
  npmConfigCache: $(Pipeline.Workspace)/.npm

steps:
  - task: PowerShell@2
    displayName: "[Cake/clientapp] dotnet tool restore"
    continueOnError: true
    inputs:
      targetType: "inline"
      script: |
        dotnet tool restore --tool-manifest starsky/.config/dotnet-tools.json
        if ($LASTEXITCODE != 0) {
          write-host "retry:"
          dotnet tool restore --tool-manifest starsky/.config/dotnet-tools.json
          exit 0
        }

  - task: Cache@2
    inputs:
      key: 'npm | clientapp | "$(Agent.OS)" | $(Build.SourcesDirectory)/starsky/starsky/clientapp/package-lock.json'
      restoreKeys: |
        npm | clientapp | "$(Agent.OS)"
      path: ${{ parameters.npmConfigCache }}
    displayName: Cache npm

  - task: PowerShell@2
    displayName: "Cake Client [with tests]"
    condition: and(succeeded(), eq('${{ parameters.jest }}', true) )
    env:
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)
    inputs:
      filePath: "starsky/build.ps1"
      arguments: '${{ parameters.runtimeArg }} --target="Client"'
      pwsh: true
      workingDirectory: "$(Build.SourcesDirectory)/starsky/"

  - task: PowerShell@2
    displayName: "Cake Client [--no-unit-tests]"
    condition: and(succeeded(), ne('${{ parameters.jest }}', true) )
    env:
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)
    inputs:
      filePath: "starsky/build.ps1"
      arguments: '${{ parameters.runtimeArg }}  --no-unit-tests --target="Client"'
      pwsh: true
      workingDirectory: "$(Build.SourcesDirectory)/starsky/"
