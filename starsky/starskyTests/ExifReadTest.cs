using System;
using System.IO;
using System.Reflection;
using MetadataExtractor.Formats.Exif;
using MetadataExtractor.Formats.Iptc;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using starsky.Attributes;
using starsky.Models;
using starsky.Services;
using Directory = MetadataExtractor.Directory;

namespace starskytests
 {
     public class MockDirectory : Directory
     {
         public override string Name => string.Empty;

         [ExcludeFromCoverage]
         protected override bool TryGetTagName(int tagType, out string tagName)
         {
             tagName = null;
             return false;
         }
     }

     [TestClass]
     public class ExifReadTest
     {

         [TestMethod]
         [ExcludeFromCoverage]
         public void GetObjectNameNull()
         {
             var t = ExifRead.GetObjectName(new MockDirectory());
             Assert.AreEqual(t, null);
         }

         [TestMethod]
         [ExcludeFromCoverage]
         public void GetObjectNameTest()
         {
             var dir = new IptcDirectory();
             dir.Set(IptcDirectory.TagObjectName, "test" );
             var t = ExifRead.GetObjectName(dir);
             Assert.AreEqual(t, "test");
             Assert.AreNotEqual(t,null);
         }

        [TestMethod]
        [ExcludeFromCoverage]
        public void GetCaptionAbstractTest()
        {
            var dir = new IptcDirectory();
            dir.Set(IptcDirectory.TagCaption, "test123");
            var t = ExifRead.GetCaptionAbstract(dir);
            Assert.AreEqual(t, "test123");
            Assert.AreNotEqual(t,string.Empty);
            Assert.AreNotEqual(t,null);
        }
         
         [TestMethod]
         [ExcludeFromCoverage]
         public void GetExifKeywordsSingleTest()
         {
             var dir = new IptcDirectory();
             dir.Set(IptcDirectory.TagKeywords, "test123");
             var t = ExifRead.GetExifKeywords(dir);
             Assert.AreEqual(t, "test123");
             Assert.AreNotEqual(t,null);
         }
         
         [TestMethod]
         [ExcludeFromCoverage]
         public void GetExifKeywordsMultipleTest()
         {
             var dir = new IptcDirectory();
             dir.Set(IptcDirectory.TagKeywords, "test123;test12");
             var t = ExifRead.GetExifKeywords(dir);
             Assert.AreEqual(t, "test123, test12"); //with space
             Assert.AreNotEqual(t, "test123,test12"); // without space
             Assert.AreNotEqual(t, "test123;test12");
             Assert.AreNotEqual(t,null);
         }
         
         [TestMethod]
         [ExcludeFromCoverage]
         public void GetExifDateTimeTest()
         {
             // Incomplete unit test 
             // todo: fix this test
             var dir2 = new ExifIfd0Directory();
             dir2.Set(IptcDirectory.TagDigitalDateCreated, "20101212");
             dir2.Set(IptcDirectory.TagDigitalTimeCreated, "124135+0000");
             dir2.Set(ExifDirectoryBase.TagDateTimeDigitized, "2010:12:12 12:41:35");
             dir2.Set(ExifDirectoryBase.TagDateTimeOriginal, "2010:12:12 12:41:35");
             dir2.Set(ExifDirectoryBase.TagDateTime, "2010:12:12 12:41:35");
             
             var t = ExifRead.GetExifDateTime(dir2);

             var date2 = new DateTime(2010, 12, 12, 12, 41, 35);
             var date = new DateTime();
             Assert.AreEqual(
                 date, t);
             Assert.AreNotEqual(t,null);
             Assert.AreNotEqual(t,date2);

         }

         public readonly string ExifreadingtestFilePath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + Path.DirectorySeparatorChar +
                                                 "exifreadingtest5.jpg";
         
         public void WriteExampleExifFile()
         {
             var base64JpgString = "/9j/4AAQSkZJRgABAQABXgFeAAD/4QQgRXhpZgAATU0AKgAAAAgACwEOAAIAAAAgAAAAkgEPAAIAAAAFAAAAsgEQAAIAAAAIAAAAuAESAAMAAAABAAEAAAEaAAUAAAABAAAAwAEbAAUAAAABAAAAyAEoAAMAAAABAAIAAAExAAIAAAAOAAAA0AEyAAIAAAAUAAAA3odpAAQAAAABAAAA8oglAAQAAAABAAADNgAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAFNPTlkAAFNMVC1BNTgAAAABXgAAAAEAAAFeAAAAAVNMVC1BNTggdjEuMDAAMjAxODowNDoyMiAxNzo0MzowMAAAI4KaAAUAAAABAAACnIKdAAUAAAABAAACpIgiAAMAAAABAAMAAIgnAAMAAAABAMgAAIgwAAMAAAABAAIAAIgyAAQAAAABAAAAyJAAAAcAAAAEMDIzMJADAAIAAAAUAAACrJAEAAIAAAAUAAACwJEBAAcAAAAEAQIDAJECAAUAAAABAAAC1JIDAAoAAAABAAAC3JIEAAoAAAABAAAC5JIFAAUAAAABAAAC7JIHAAMAAAABAAUAAJIIAAMAAAABAAAAAJIJAAMAAAABABAAAJIKAAUAAAABAAAC9KAAAAcAAAAEMDEwMKABAAMAAAABAAEAAKACAAQ"+
            "AAAABAAAAA6ADAAQAAAABAAAAAqMAAAcAAAABAwAAAKMBAAcAAAABAQAAAKQBAAMAAAABAAAAAKQCAAMAAAABAAAAAKQDAAMAAAABAAAAAKQEAAUAAAABAAAC/KQFAAMAAAABAJYAAKQGAAMAAAABAAAAAKQIAAMAAAABAAAAAKQJAAMAAAABAAAAAKQKAAMAAAABAAAAAKQyAAUAAAAEAAADBKQ0AAIAAAASAAADJAAAAAAAAAABAAAADwAAAA0AAAABMjAxODowNDoyMiAxNjoxNDo1NAAyMDE4OjA0OjIyIDE2OjE0OjU0AAAAAAMAAAABAAAH5wAAAUAAAAADAAAACgAAAJ8AAAAgAAAAZAAAAAEAAAABAAAAAQAAABgAAAABAAAAaQAAAAEAAAAHAAAAAgAAAAkAAAACMjQtMTA1bW0gRjMuNS00LjUAAAoAAAABAAAABAICAAAAAQACAAAAAk4AAAAAAgAFAAAAAwAAA7QAAwACAAAAAkUAAAAABAAFAAAAAwAAA8wABQABAAAAAQAAAAAABgAFAAAAAQAAA+QABwAFAAAAAwAAA+wAEgACAAAABwAABAQAHQACAAAACwAABAwAAAAAAAAANAAAAAEAAAASAAAAAQAAC4oAAABkAAAABgAAAAEAAAALAAAAAQAADmAAAABkAAAYxQAAA+gAAAAOAAAAAQAAAA4AAAABAAAAIgAAAAFXR1MtODQAADIwMTg6MDQ6MjIAAP/hIFdodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8" +
            "+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuMS4yIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgeG1sbnM6ZXhpZkVYPSJodHRwOi8vY2lwYS5qcC9leGlmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOmF1eD0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC9hdXgvIgogICAgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6SXB0YzR4bXBFeHQ9Imh0dHA6Ly9pcHRjLm9yZy9zdGQ"+
            "vSXB0YzR4bXBFeHQvMjAwOC0wMi0yOS8iCiAgICB4bWxuczpwaG90b21lY2hhbmljPSJodHRwOi8vbnMuY2FtZXJhYml0cy5jb20vcGhvdG9tZWNoYW5pYy8xLjAvIgogICBleGlmOlNjZW5lVHlwZT0iMSIKICAgZXhpZjpHUFNBbHRpdHVkZVJlZj0iMCIKICAgZXhpZjpDb250cmFzdD0iMCIKICAgZXhpZjpDb21wcmVzc2VkQml0c1BlclBpeGVsPSIzLzEiCiAgIGV4aWY6R1BTTGF0aXR1ZGU9IjUyLDE4LjQ5Mk4iCiAgIGV4aWY6R1BTVGltZVN0YW1wPSIyMDE4LTA0LTIyVDE0OjE0OjM0KzAwMDAiCiAgIGV4aWY6RGlnaXRhbFpvb21SYXRpbz0iMS8xIgogICBleGlmOlBpeGVsWURpbWVuc2lvbj0iMiIKICAgZXhpZjpDdXN0b21SZW5kZXJlZD0iMCIKICAgZXhpZjpNZXRlcmluZ01vZGU9IjUiCiAgIGV4aWY6UGl4ZWxYRGltZW5zaW9uPSIzIgogICBleGlmOlNjZW5lQ2FwdHVyZVR5cGU9IjAiCiAgIGV4aWY6Rm9jYWxMZW5JbjM1bW1GaWxtPSIxNTAiCiAgIGV4aWY6RXhwb3N1cmVNb2RlPSIwIgogICBleGlmOkdQU0FsdGl0dWRlPSI2My8xMCIKICAgZXhpZjpTYXR1cmF0aW9uPSIwIgogICBleGlmOkV4cG9zdXJlVGltZT0iMS8xNSIKICAgZXhpZjpTaGFycG5lc3M9IjAiCiAgIGV4aWY6QnJpZ2h0bmVzc1ZhbHVlPSIyMDIzLzMyMCIKICAgZXhpZjpHUFNMb25naXR1ZGU9IjYsMTEuNjEzRSIKICAgZXhpZjp"+
            "HUFNWZXJzaW9uSUQ9IjIuMi4wLjAiCiAgIGV4aWY6RXhpZlZlcnNpb249IjAyMzAiCiAgIGV4aWY6RmlsZVNvdXJjZT0iMyIKICAgZXhpZjpGbGFzaFBpeFZlcnNpb249IjAxMDAiCiAgIGV4aWY6V2hpdGVCYWxhbmNlPSIwIgogICBleGlmOkNvbG9yU3BhY2U9IjEiCiAgIGV4aWY6Rm9jYWxMZW5ndGg9IjEwMC8xIgogICBleGlmOkV4cG9zdXJlUHJvZ3JhbT0iMyIKICAgZXhpZjpGTnVtYmVyPSIxMy8xIgogICBleGlmOk1heEFwZXJ0dXJlVmFsdWU9IjE1OS8zMiIKICAgZXhpZjpHUFNNYXBEYXR1bT0iV0dTLTg0IgogICBleGlmOkxpZ2h0U291cmNlPSIwIgogICBleGlmOkV4cG9zdXJlQmlhc1ZhbHVlPSIzLzEwIgogICBleGlmOkdQU0RhdGVUaW1lPSIyMDE4LTA0LTIyVDE0OjE0OjM0WiIKICAgZXhpZkVYOlJlY29tbWVuZGVkRXhwb3N1cmVJbmRleD0iMjAwIgogICBleGlmRVg6UGhvdG9ncmFwaGljU2Vuc2l0aXZpdHk9IjIwMCIKICAgZXhpZkVYOkxlbnNNb2RlbD0iMjQtMTA1bW0gRjMuNS00LjUiCiAgIGV4aWZFWDpTZW5zaXRpdml0eVR5cGU9IjIiCiAgIHhtcDpDcmVhdG9yVG9vbD0iU0xULUE1OCB2MS4wMCIKICAgeG1wOkNyZWF0ZURhdGU9IjIwMTgtMDQtMjJUMTY6MTQ6NTQiCiAgIHhtcDpNZXRhZGF0YURhdGU9IjIwMTgtMDQtMjJUMTc6NDM6MDArMDI6MDAiCiAgIHhtcDpNb2RpZnlEYXRlPSIy"+
            "MDE4LTA0LTIyVDE3OjQzOjAwKzAyOjAwIgogICB4bXA6TGFiZWw9IiIKICAgeG1wOlJhdGluZz0iMCIKICAgdGlmZjpSZXNvbHV0aW9uVW5pdD0iMiIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgdGlmZjpYUmVzb2x1dGlvbj0iMzUwLzEiCiAgIHRpZmY6WVJlc29sdXRpb249IjM1MC8xIgogICB0aWZmOk1vZGVsPSJTTFQtQTU4IgogICB0aWZmOk1ha2U9IlNPTlkiCiAgIGF1eDpMZW5zPSJTaWdtYSAxOC0yMDBtbSBGMy41LTYuMyBEQyIKICAgYXV4OkZsYXNoQ29tcGVuc2F0aW9uPSIwLzEiCiAgIGF1eDpMZW5zSUQ9IjI0IgogICBwaG90b3Nob3A6Q2l0eT0iRGllcGVudmVlbiIKICAgcGhvdG9zaG9wOlN0YXRlPSJPdmVyaWpzc2VsIgogICBwaG90b3Nob3A6Q291bnRyeT0iTmVkZXJsYW5kIgogICBwaG90b3Nob3A6RGF0ZUNyZWF0ZWQ9IjIwMTgtMDQtMjJUMTY6MTQ6NTQrMDE6MDAiCiAgIHBob3RvbWVjaGFuaWM6Q29sb3JDbGFzcz0iMCIKICAgcGhvdG9tZWNoYW5pYzpUYWdnZWQ9IkZhbHNlIgogICBwaG90b21lY2hhbmljOlByZWZzPSIwOjA6M"+
            "DotMDAwMDEiCiAgIHBob3RvbWVjaGFuaWM6UE1WZXJzaW9uPSJQTTUiPgogICA8ZXhpZjpGbGFzaAogICAgZXhpZjpGdW5jdGlvbj0iRmFsc2UiCiAgICBleGlmOkZpcmVkPSJGYWxzZSIKICAgIGV4aWY6UmV0dXJuPSIwIgogICAgZXhpZjpNb2RlPSIyIgogICAgZXhpZjpSZWRFeWVNb2RlPSJGYWxzZSIvPgogICA8ZXhpZjpJU09TcGVlZFJhdGluZ3M+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpPjIwMDwvcmRmOmxpPgogICAgPC9yZGY6U2VxPgogICA8L2V4aWY6SVNPU3BlZWRSYXRpbmdzPgogICA8ZXhpZjpDb21wb25lbnRzQ29uZmlndXJhdGlvbj4KICAgIDxyZGY6U2VxPgogICAgIDxyZGY6bGk+MTwvcmRmOmxpPgogICAgIDxyZGY6bGk+MjwvcmRmOmxpPgogICAgIDxyZGY6bGk+MzwvcmRmOmxpPgogICAgIDxyZGY6bGk+MDwvcmRmOmxpPgogICAgPC9yZGY6U2VxPgogICA8L2V4aWY6Q29tcG9uZW50c0NvbmZpZ3VyYXRpb24+CiAgIDxleGlmRVg6TGVuc1NwZWNpZmljYXRpb24+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpPjI0LzE8L3JkZjpsaT4KICAgICA8cmRmOmxpPjEwNS8xPC9yZGY6bGk"+
            "+CiAgICAgPHJkZjpsaT43LzI8L3JkZjpsaT4KICAgICA8cmRmOmxpPjkvMjwvcmRmOmxpPgogICAgPC9yZGY6U2VxPgogICA8L2V4aWZFWDpMZW5zU3BlY2lmaWNhdGlvbj4KICAgPGRjOnN1YmplY3Q+CiAgICA8cmRmOkJhZz4KICAgICA8cmRmOmxpPnRlc3Q8L3JkZjpsaT4KICAgICA8cmRmOmxpPnNpb248L3JkZjpsaT4KICAgIDwvcmRmOkJhZz4KICAgPC9kYzpzdWJqZWN0PgogICA8ZGM6ZGVzY3JpcHRpb24+CiAgICA8cmRmOkFsdD4KICAgICA8cmRmOmxpIHhtbDpsYW5nPSJ4LWRlZmF1bHQiPmNhcHRpb248L3JkZjpsaT4KICAgIDwvcmRmOkFsdD4KICAgPC9kYzpkZXNjcmlwdGlvbj4KICAgPElwdGM0eG1wRXh0OkxvY2F0aW9uQ3JlYXRlZD4KICAgIDxyZGY6QmFnPgogICAgIDxyZGY6bGkKICAgICAgSXB0YzR4bXBFeHQ6U3VibG9jYXRpb249IiIKICAgICAgSXB0YzR4bXBFeHQ6Q2l0eT0iRGllcGVudmVlbiIKICAgICAgSXB0YzR4bXBFeHQ6UHJvdmluY2VTdGF0ZT0iT3Zlcmlqc3NlbCIKICAgICAgSXB0YzR4bXBFeHQ6Q291bnRyeU5hbWU9Ik5lZGVybGFuZCIKICAgICAgSXB0YzR4bXBFeHQ6Q291bn"+
            "RyeUNvZGU9IiIKICAgICAgSXB0YzR4bXBFeHQ6V29ybGRSZWdpb249IiIvPgogICAgPC9yZGY6QmFnPgogICA8L0lwdGM0eG1wRXh0OkxvY2F0aW9uQ3JlYXRlZD4KICAgPElwdGM0eG1wRXh0OkxvY2F0aW9uU2hvd24+CiAgICA8cmRmOkJhZz4KICAgICA8cmRmOmxpCiAgICAgIElwdGM0eG1wRXh0OlN1YmxvY2F0aW9uPSIiCiAgICAgIElwdGM0eG1wRXh0OkNpdHk9IkRpZXBlbnZlZW4iCiAgICAgIElwdGM0eG1wRXh0OlByb3ZpbmNlU3RhdGU9Ik92ZXJpanNzZWwiCiAgICAgIElwdGM0eG1wRXh0OkNvdW50cnlOYW1lPSJOZWRlcmxhbmQiCiAgICAgIElwdGM0eG1wRXh0OkNvdW50cnlDb2RlPSIiCiAgICAgIElwdGM0eG1wRXh0OldvcmxkUmVnaW9uPSIiLz4KICAgIDwvcmRmOkJhZz4KICAgPC9JcHRjNHhtcEV4dDpMb2NhdGlvblNob3duPgogIDwvcmRmOkRlc2NyaXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg"+
            "ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg"+
            "ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg"+
            "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC"+
            "AgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI"+
            "CAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA"+
            "gICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA"+
            "gICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC"+
            "AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz7"+ "/7QDYUGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAJ8cAVoAAxslRxwCAAACAAMcAjcACDIwMTgwNDIyHAI8AAsxNjE0NTQrMDEwMBwCWgAKRGllcGVudmVlbhwCXwAKT3Zlcmlqc3NlbBwCZQAJTmVkZXJsYW5kHAIZAAR0ZXN0HAIZAARzaW9uHAJ4AAdjYXB0aW9uHALdAAwwOjA6MDotMDAwMDEcAj4ACDIwMTgwNDIyHAI/AAYxNjE0NTQAOEJJTQQlAAAAAAAQ5etZ32EqFEFvKp7bZiZuKP"+ 
            "/bAIQAAQEBAQEBAgICAgICAgICBAMCAgMEBQQDAwMEBQcFBAMDBAUHBwYFBAUGBwgGBQUGCAgHBwcICQgICQoKCgwMDgECAgICAgIDAgIDBgMCAwYMBgQEBgwPDAcFBwwPDw8NCQkNDw8PDw8ODw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8P/8IAEQgAAgADAwEhAAIRAQMRAf/EABQAAQAAAAAAAAAAAAAAAAAAAAn/2gAIAQEAAAAARX//xAAUAQEAAAAAAAAAAAAAAAAAAAAF/9oACAECEAAAAAf/xAAUAQEAAAAAAAAAAAAAAAAAAAAD/9oACAEDEAAAAB//xAAgEAABAwIHAAAAAAAAAAAAAAABAgYhBBEAAwUSIzFR/9oACAEBAAE/AGE1WuloUFtNoBfJ3HhRKlEkkx2TJPuP/8QAGxEAAgEFAAAAAAAAAAAAAAAAAQIFAAMEEXL/2gAIAQIBAT8AWOjyoJxbe+RX/8QAGREBAAIDAAAAAAAAAAAAAAAAAQACERIh/9oACAEDAQE/ANrHBcT/2Q==";
             var filePath = ExifreadingtestFilePath;

             if (!File.Exists(filePath))
             {
                 File.WriteAllBytes(filePath, Convert.FromBase64String(base64JpgString));
             }
         }

         [TestMethod]
         public void ParseGPSTest()
         {
             var latitude = ExifRead.ConvertDegreeAngleToDouble("52° 18' 29.54\"", "N");
             Assert.AreEqual(latitude,  52.308205555500003, 0.000001);
             
             var longitude = ExifRead.ConvertDegreeAngleToDouble("6° 11' 36.8\"", "E");
             Assert.AreEqual(longitude,  6.1935555554999997, 0.000001);

         }
         
         [TestMethod]
         public void ReadExifFromFileTest()
         {
             WriteExampleExifFile();
             AppSettingsProvider.Verbose = true;
             var item = ExifRead.ReadExifFromFile(ExifreadingtestFilePath);
             
             Assert.AreEqual(item.ColorClass,FileIndexItem.Color.None);
             Assert.AreEqual(item.Description, "caption");
             Assert.AreEqual(item.IsDirectory, false);
             Assert.AreEqual(item.Tags, "test, sion");
             Assert.AreEqual(item.Latitude,  52.308205555500003, 0.000001);
             Assert.AreEqual(item.Longitude, 6.1935555554999997, 0.000001);
         }

     }
 }
