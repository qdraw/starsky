using System;
using System.IO;
using System.Reflection;
using MetadataExtractor.Formats.Exif;
using MetadataExtractor.Formats.Iptc;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using starsky.Attributes;
using starsky.Services;
using Directory = MetadataExtractor.Directory;

namespace starskytests
 {
     public class MockDirectory : Directory
     {
         public override string Name => string.Empty;

         [ExcludeFromCoverage]
         protected override bool TryGetTagName(int tagType, out string tagName)
         {
             tagName = null;
             return false;
         }
     }

     [TestClass]
     public class ExifReadTest
     {

         [TestMethod]
         [ExcludeFromCoverage]
         public void GetObjectNameNull()
         {
             var t = ExifRead.GetObjectName(new MockDirectory());
             Assert.AreEqual(t, null);
         }

         [TestMethod]
         [ExcludeFromCoverage]
         public void GetObjectNameTest()
         {
             var dir = new IptcDirectory();
             dir.Set(IptcDirectory.TagObjectName, "test" );
             var t = ExifRead.GetObjectName(dir);
             Assert.AreEqual(t, "test");
             Assert.AreNotEqual(t,null);
         }

        [TestMethod]
        [ExcludeFromCoverage]
        public void GetCaptionAbstractTest()
        {
            var dir = new IptcDirectory();
            dir.Set(IptcDirectory.TagCaption, "test123");
            var t = ExifRead.GetCaptionAbstract(dir);
            Assert.AreEqual(t, "test123");
            Assert.AreNotEqual(t,string.Empty);
            Assert.AreNotEqual(t,null);
        }
         
         [TestMethod]
         [ExcludeFromCoverage]
         public void GetExifKeywordsSingleTest()
         {
             var dir = new IptcDirectory();
             dir.Set(IptcDirectory.TagKeywords, "test123");
             var t = ExifRead.GetExifKeywords(dir);
             Assert.AreEqual(t, "test123");
             Assert.AreNotEqual(t,null);
         }
         
         [TestMethod]
         [ExcludeFromCoverage]
         public void GetExifKeywordsMultipleTest()
         {
             var dir = new IptcDirectory();
             dir.Set(IptcDirectory.TagKeywords, "test123;test12");
             var t = ExifRead.GetExifKeywords(dir);
             Assert.AreEqual(t, "test123, test12"); //with space
             Assert.AreNotEqual(t, "test123,test12"); // without space
             Assert.AreNotEqual(t, "test123;test12");
             Assert.AreNotEqual(t,null);
         }
         
         [TestMethod]
         [ExcludeFromCoverage]
         public void GetExifDateTimeTest()
         {
             // Incomplete unit test 
             // todo: fix this test
             var dir2 = new ExifIfd0Directory();
             dir2.Set(IptcDirectory.TagDigitalDateCreated, "20101212");
             dir2.Set(IptcDirectory.TagDigitalTimeCreated, "124135+0000");
             dir2.Set(ExifDirectoryBase.TagDateTimeDigitized, "2010:12:12 12:41:35");
             dir2.Set(ExifDirectoryBase.TagDateTimeOriginal, "2010:12:12 12:41:35");
             dir2.Set(ExifDirectoryBase.TagDateTime, "2010:12:12 12:41:35");
             
             var t = ExifRead.GetExifDateTime(dir2);

             var date2 = new DateTime(2010, 12, 12, 12, 41, 35);
             var date = new DateTime();
             Assert.AreEqual(
                 date, t);
             Assert.AreNotEqual(t,null);
             Assert.AreNotEqual(t,date2);

         }

         public void WriteExampleExifFile()
         {
             var base64JpgString = "/9j/4AAQSkZJRgABAQABXgFeAAD/4QQgRXhpZgAATU0AKgAAAAgACwEOAAIAAAAgAAAAkgEPAAIAAAAFAAAAsgEQAAIAAAAIAAAAuAESAAMAAAABAAEAAAEaAAUAAAABAAAAwAEbAAUAAAABAAAAyAEoAAMAAAABAAIAAAExAAIAAAAOAAAA0AEyAAIAAAAUAAAA3odpAAQAAAABAAAA8oglAAQAAAABAAADNgAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAFNPTlkAAFNMVC1BNTgAAAABXgAAAAEAAAFeAAAAAVNMVC1BNTggdjEuMDAAMjAxODowNDoyMiAxNzo0MzowMAAAI4KaAAUAAAABAAACnIKdAAUAAAABAAACpIgiAAMAAAABAAMAAIgnAAMAAAABAMgAAIgwAAMAAAABAAIAAIgyAAQAAAABAAAAyJAAAAcAAAAEMDIzMJADAAIAAAAUAAACrJAEAAIAAAAUAAACwJEBAAcAAAAEAQIDAJECAAUAAAABAAAC1JIDAAoAAAABAAAC3JIEAAoAAAABAAAC5JIFAAUAAAABAAAC7JIHAAMAAAABAAUAAJIIAAMAAAABAAAAAJIJAAMAAAABABAAAJIKAAUAAAABAAAC9KAAAAcAAAAEMDEwMKABAAMAAAABAAEAAKACAAQAAAABAAAAA6ADAAQAAAABAAAAAqMAAAcAAAABAwAAAKMBAAcAAAABAQAAAKQBAAMAAAABAAAAAKQCAAMAAAABAAAAAKQDAAMAAAABAAAAAKQEAAUAAAABAAAC/KQFAAMAAAABAJYAAKQGAAMAAAABAAAAAKQIAAMAAAABAAAAAKQJAAMAAAABAAAAAKQKAAMAAAABAAAAAKQyAAUAAAAEAAADBKQ0AAIAAAASAAADJAAAAAAAAAABAAAADwAAAA0AAAABMjAxODowNDoyMiAxNjoxNDo1NAAyMDE4OjA0OjIyIDE2OjE0OjU0AAAAAAMAAAABAAAH5wAAAUAAAAADAAAACgAAAJ8AAAAgAAAAZAAAAAEAAAABAAAAAQAAABgAAAABAAAAaQAAAAEAAAAHAAAAAgAAAAkAAAACMjQtMTA1bW0gRjMuNS00LjUAAAoAAAABAAAABAICAAAAAQACAAAAAk4AAAAAAgAFAAAAAwAAA7QAAwACAAAAAkUAAAAABAAFAAAAAwAAA8wABQABAAAAAQAAAAAABgAFAAAAAQAAA+QABwAFAAAAAwAAA+wAEgACAAAABwAABAQAHQACAAAACwAABAwAAAAAAAAANAAAAAEAAAASAAAAAQAAC4oAAABkAAAABgAAAAEAAAALAAAAAQAADmAAAABkAAAYxQAAA+gAAAAOAAAAAQAAAA4AAAABAAAAIgAAAAFXR1MtODQAADIwMTg6MDQ6MjIAAP/hD7JodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6SXB0YzR4bXBFeHQ9Imh0dHA6Ly9pcHRjLm9yZy9zdGQvSXB0YzR4bXBFeHQvMjAwOC0wMi0yOS8iIHhtbG5zOmF1eD0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC9hdXgvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3RvbWVjaGFuaWM9Imh0dHA6Ly9ucy5jYW1lcmFiaXRzLmNvbS9waG90b21lY2hhbmljLzEuMC8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiBhdXg6Rmxhc2hDb21wZW5zYXRpb249IjAvMSIgYXV4OkxlbnNJRD0iMjQiIGF1eDpMZW5zPSJTaWdtYSAxOC0yMDBtbSBGMy41LTYuMyBEQyIgcGhvdG9tZWNoYW5pYzpQTVZlcnNpb249IlBNNSIgcGhvdG9tZWNoYW5pYzpQcmVmcz0iMDoyOjA6LTAwMDAxIiBwaG90b21lY2hhbmljOlRhZ2dlZD0iRmFsc2UiIHBob3RvbWVjaGFuaWM6Q29sb3JDbGFzcz0iMiIgcGhvdG9zaG9wOkNpdHk9IkRpZXBlbnZlZW4iIHBob3Rvc2hvcDpTdGF0ZT0iT3Zlcmlqc3NlbCIgcGhvdG9zaG9wOkNvdW50cnk9Ik5lZGVybGFuZCIgcGhvdG9zaG9wOkRhdGVDcmVhdGVkPSIyMDE4LTA0LTIyVDE2OjE0OjU0KzAxOjAwIiB4bXA6Q3JlYXRlRGF0ZT0iMjAxOC0wNC0yMlQxNjoxNDo1NCIgeG1wOkxhYmVsPSJXaW5uZXIgYWx0IiB4bXA6TWV0YWRhdGFEYXRlPSIyMDE4LTA0LTIyVDE3OjQzOjAwKzAyOjAwIiB4bXA6Q3JlYXRvclRvb2w9IlNMVC1BNTggdjEuMDAiIHhtcDpSYXRpbmc9IjAiIHhtcDpNb2RpZnlEYXRlPSIyMDE4LTA0LTIyVDE3OjQzOjAwKzAyOjAwIj4gPElwdGM0eG1wRXh0OkxvY2F0aW9uQ3JlYXRlZD4gPHJkZjpCYWc+IDxyZGY6bGkgSXB0YzR4bXBFeHQ6U3VibG9jYXRpb249IiIgSXB0YzR4bXBFeHQ6UHJvdmluY2VTdGF0ZT0iT3Zlcmlqc3NlbCIgSXB0YzR4bXBFeHQ6Q2l0eT0iRGllcGVudmVlbiIgSXB0YzR4bXBFeHQ6Q291bnRyeUNvZGU9IiIgSXB0YzR4bXBFeHQ6Q291bnRyeU5hbWU9Ik5lZGVybGFuZCIgSXB0YzR4bXBFeHQ6V29ybGRSZWdpb249IiIvPiA8L3JkZjpCYWc+IDwvSXB0YzR4bXBFeHQ6TG9jYXRpb25DcmVhdGVkPiA8SXB0YzR4bXBFeHQ6TG9jYXRpb25TaG93bj4gPHJkZjpCYWc+IDxyZGY6bGkgSXB0YzR4bXBFeHQ6U3VibG9jYXRpb249IiIgSXB0YzR4bXBFeHQ6UHJvdmluY2VTdGF0ZT0iT3Zlcmlqc3NlbCIgSXB0YzR4bXBFeHQ6Q2l0eT0iRGllcGVudmVlbiIgSXB0YzR4bXBFeHQ6Q291bnRyeUNvZGU9IiIgSXB0YzR4bXBFeHQ6Q291bnRyeU5hbWU9Ik5lZGVybGFuZCIgSXB0YzR4bXBFeHQ6V29ybGRSZWdpb249IiIvPiA8L3JkZjpCYWc+IDwvSXB0YzR4bXBFeHQ6TG9jYXRpb25TaG93bj4gPGRjOnN1YmplY3Q+IDxyZGY6QmFnPiA8cmRmOmxpPkRpb24gdmFuIFZlbGRlPC9yZGY6bGk+IDxyZGY6bGk+Q2hyaXN0YSBCZWlqZXI8L3JkZjpsaT4gPHJkZjpsaT5zaW9uPC9yZGY6bGk+IDwvcmRmOkJhZz4gPC9kYzpzdWJqZWN0PiA8ZGM6ZGVzY3JpcHRpb24+IDxyZGY6QWx0PiA8cmRmOmxpIHhtbDpsYW5nPSJ4LWRlZmF1bHQiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JkZjpsaT4gPC9yZGY6QWx0PiA8L2RjOmRlc2NyaXB0aW9uPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3hwYWNrZXQgZW5kPSJ3Ij8+AP/tAPxQaG90b3Nob3AgMy4wADhCSU0EBAAAAAAAwxwBWgADGyVHHAIAAAIAAhwCZQAJTmVkZXJsYW5kHAIZAA5EaW9uIHZhbiBWZWxkZRwCGQAOQ2hyaXN0YSBCZWlqZXIcAhkABHNpb24cAj4ACDIwMTgwNDIyHAI/AAYxNjE0NTQcAngAHyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAcAjcACDIwMTgwNDIyHAI8AAsxNjE0NTQrMDEwMBwCXwAKT3Zlcmlqc3NlbBwCWgAKRGllcGVudmVlbgA4QklNBCUAAAAAABBBBSNEulC8kTO3E1nmzSeC/9sAhAABAQEBAQECAgICAgICAgIEAwICAwQFBAMDAwQFBwUEAwMEBQcHBgUEBQYHCAYFBQYICAcHBwgJCAgJCgoKDAwOAQICAgICAgMCAgMGAwIDBgwGBAQGDA8MBwUHDA8PDw0JCQ0PDw8PDw4PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw//wgARCAACAAMDASEAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/aAAgBAQAAAABFf//EABQBAQAAAAAAAAAAAAAAAAAAAAX/2gAIAQIQAAAAB//EABQBAQAAAAAAAAAAAAAAAAAAAAP/2gAIAQMQAAAAH//EACAQAAEDAgcAAAAAAAAAAAAAAAECBiEEEQADBRIjMVH/2gAIAQEAAT8AYTVa6WhQW02gF8nceFEqUSSTHZMk+4//xAAbEQACAQUAAAAAAAAAAAAAAAABAgUAAwQRcv/aAAgBAgEBPwBY6PKgnFt75Ff/xAAZEQEAAgMAAAAAAAAAAAAAAAABAAIREiH/2gAIAQMBAT8A2scFxP/Z";
             var filePath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + Path.DirectorySeparatorChar +
                            "exifreadingtest.jpg";

             if (!File.Exists(filePath))
             {
                 File.WriteAllBytes(filePath + "exifreadingtest.jpg", Convert.FromBase64String(base64JpgString));
             }
         }

         [TestMethod]
         public void ReadFile()
         {
             WriteExampleExifFile();
         }

     }
 }
