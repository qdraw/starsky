@using Microsoft.AspNetCore.Mvc
@using starsky.ViewModels
@using starskycore.Models
@model SearchViewModel
@{
    ViewData["Title"] = Model.SearchQuery + " - Search";
    ViewData["SearchQuery"] = Model.SearchQuery;
}

<div class="archive">

	<h4 class="nextprev">
		&nbsp;
		@if (Model.PageNumber >= 1)
		{
			var prevpage = @Model.PageNumber - 1;
			<a class="prev" asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@prevpage">Vorig resultaat</a>
		}
    
		@if (Model.PageNumber < Model.LastPageNumber)
		{
			var nextpage = @Model.PageNumber + 1;
			<a class="next" asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@nextpage">Volgend resultaat</a>
		}
	</h4>
    
<h1 class="breadcrumb">

	<a asp-controller="Home" asp-action="Index">Home</a>
	<span> &raquo;</span>
	<a asp-controller="Search" asp-action="Index">Zoeken</a>
	
	@{
		var urlPath = @Url.Action("Index", "Search", new {t = @Model.Breadcrumb.LastOrDefault() });
		urlPath = urlPath.Replace("%2F", "/");
		if ( Model.Breadcrumb.LastOrDefault() != string.Empty )
		{
			<span> &raquo;</span>
			<a href="@urlPath">@Model.Breadcrumb.LastOrDefault()</a>
		}
	}
</h1>
    
	<div class="wrapper">
		<form asp-controller="Search" asp-action="Index" method="post" class="form-inline form-wrapper">
			<input name="t" value="@Model.SearchQuery" class="form-control" autocomplete="off"/>
			<button class="btn btn-default" type="submit">Zoek</button>
		</form>
	</div>
    
    
    
	<div class="wrapper searchcount">
    
		<p>
			@{ 
				var humanPageNumbering = @Model.PageNumber + 1;
			}
			@if (@Model.PageNumber >= 1)
			{
				<text>Pagina @humanPageNumbering van </text> 
			}
            
			@if ( @Model.SearchCount == 1 )
			{
				<text>1 resultaat</text> 
			}
			else
			{
				@Model.SearchCount <text> resultaten</text>
			}
			
            (@Math.Round(@Model.ElapsedSeconds,2) seconden) 
			
			<em><text>(resultaat is  </text>   
			@{
				if ( @Model.Offset > 60)
				{
					<text>@Math.Round(@Model.Offset /60 ) minuten oud</text>
				}
				else if (@Model.Offset < 4 )
				{
					<text>realtime</text>
				}
				else
				{
					<text>@Math.Round(@Model.Offset) seconden oud</text>
				}
				<text>)</text>                                          
			}
			</em>

			
			<br/>
			@for (var i = 0; i < @Model.SearchIn.Count; i++)
			{
				<i>
					@Model.SearchIn[i]
					@Model.SearchForOptions[i]  
					@Model.SearchFor[i]  
				</i>
			}
		</p>
	</div>
    
	@if (@Model.SearchCount == 0)
	{
		<div class="wrapper">

			<p><b>Instructies </b><br/>
				Zoekopties (bevat woord): <br/>
				(default: ) Zoek term => Tags<br/>
				-tags:"zoek term" <br/>
				-filepath="/path" <br/>
				-filename:2018 <br/>
				-parentdirectory:2018 <br/>
				-description:"zoek term" <br/>
				-title:zoekterm <br/>
				-datetime>2018-01-01T01:01:01 <br/>
				-datetime=1 <em>(zoek naar foto's van gisteren)</em> <br/>
				-addtodatabase<2018-01-01T01:01:01 <br/>
				-filehash:3DB75N7JJ6FDOPZY4YHGX4TLKHOQ <br/>
				-isdirectory:true <em>or</em> -isdirectory:false<br/>
				InUrl: Gebruik '-inurl:naam', '-inurl=naam' of '-inurl:"naam met spatie"' zoek woorden om verder te specificeren<br/>
				Tags: Normale Sleutelwoorden worden gelezen als deze combinatie is aanwezig in het Tags-veld
			</p>
		</div>
	}
    
	<div class="wrapper">
    
		@foreach (var item in Model.FileIndexItems)
		{
			var enumValue = (int) item.ColorClass;
			var directoryLabel = "directory-" + item.IsDirectory.ToString().ToLower();
			urlPath = @Url.Action("Index", "Home", new {f = @item.FilePath});
			urlPath = urlPath.Replace("%2F", "/");
			<a class="halfitem @item.ColorClass colorclass-@enumValue @directoryLabel" data-filename="@item.FileName" data-tag="colorclass-@enumValue"
			   data-tagnl="@FileIndexItem.GetAllColorUserInterface().FirstOrDefault(p => (int) p == enumValue)"
			   href="@urlPath">
				<div class="caption">
					<h2>@item.FileName</h2>
					<p>@item.Tags</p>
				</div>
				<img class="lazyload" src="#" data-src="@Url.Action("Thumbnail", "Api", new {f = item.FileHash, issingleitem = false })" alt=""/>
			</a>
		}
	</div>
    
    
	@*Pagination*@
	<div class="wrapper">
    
		<div class="paginationbase">
			@{
				var displayPageNumber = Model.PageNumber + 1;
			}
        
			@if (Model.PageNumber >= 1)
			{
				var prevpage = Model.PageNumber - 1;
				<a class="leftarrow" asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@prevpage">&lt;</a>
			}
    
        
			<span class="numberbox">
    
				@*  Display first page  *@
				@{ var currentmin2 = (Model.PageNumber - 2);}
				@if (@currentmin2 >= 0 )
				{
					<a asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="0">1</a>
					if (@currentmin2-1 >= 0 ) {
						<span class="box">...</span>
					}
				}
            
                @*  Display previous page (-1)  *@
				@{ var currentmin1 = (Model.PageNumber - 1);}
				@if (@currentmin1 >= 0 )  // && !(@currentmin2-1 >= 0) 
				{
					//  !(@currentmin2-1 >= 0)  => hide if .. 
					<a asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@currentmin1">
						@{
							@(currentmin1 + 1);
						}
					</a>
				}
            
                @*    Current page number*@
				<a class="current" asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@Model.PageNumber">
					@displayPageNumber
				</a>
            
				@*  Display next page (+1)  *@
				@{ var currentplus1 = (Model.PageNumber + 1);}
				@if (Model.PageNumber < Model.LastPageNumber )
				{
					// hide if .. !((Model.PageNumber + 2)-1 <= Model.LastPageNumber )
					<a asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@currentplus1">
						@{
							@(currentplus1 + 1);
						}
					</a>
				}
            
                @*  Display last page  *@
				@{ var currentplus2 = (Model.PageNumber + 2);}
				@if (@currentplus2 <= @Model.LastPageNumber )
				{
					// it glitch if human lenght = 3
					if ((@currentplus2-1 <= Model.LastPageNumber && Model.LastPageNumber != 2)  ) {
						<span class="box">...</span>
					}
					<a asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@Model.LastPageNumber">
						@{
							@(Model.LastPageNumber + 1);
						}
					</a>
				}
                
			</span>
			@*  Next arrow  *@
			@if (Model.PageNumber < Model.LastPageNumber)
			{
				var nextpage = @Model.PageNumber + 1;
				<a class="rightarrow" asp-controller="Search" asp-action="Index" asp-route-t="@Model.SearchQuery" asp-route-p="@nextpage">&gt;</a>
			}
		</div>
	</div>
</div>



@*For IE/IE-Edge "object-fit: cover" *@
<script type="text/javascript" src="~/js/vendor/ofi.min.js" defer></script>
<script type="text/javascript" src="~/js/sidebar-stringhelper.js" defer></script>
<script type="text/javascript" src="~/js/archivesidebar.js" defer></script>
<script type="text/javascript" src="~/js/toggleIsSingleitem.js" defer></script>