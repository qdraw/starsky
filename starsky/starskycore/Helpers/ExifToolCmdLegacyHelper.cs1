using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using starskycore.Interfaces;
using starskycore.Models;
using starskycore.Services;

namespace starskycore.Helpers
{
	public class ExifToolCmdLegacyHelper
	{
		private AppSettings _appSettings;
		private IExifTool _exifTool;
		private IStorage _iStorage;
		private IReadMeta _readMeta;

		public ExifToolCmdLegacyHelper(AppSettings appSettings, IExifTool exifTool, IStorage iStorage, IReadMeta readMeta)
		{
			_appSettings = appSettings;
			_exifTool = exifTool;
			_iStorage = iStorage;
			_readMeta = readMeta;
		}
		
		/// <summary>
		/// Add a .xmp sidecar file
		/// </summary>
		/// <param name="subPath"></param>
		/// <returns></returns>
		public string XmpLegacySync(string subPath)
		{
			// only for raw files
			if ( !ExtensionRolesHelper.IsExtensionForceXmp(subPath) ) return subPath;

			var withXmp = ExtensionRolesHelper.ReplaceExtensionWithXmp(subPath);

			// only for files that not exist yet
			if ( _iStorage.IsFolderOrFile(withXmp) != 
			     FolderOrFileModel.FolderOrFileTypeList.Deleted) return withXmp;
			
			var exifCopy = new ExifCopy(_iStorage,_exifTool,_readMeta);
			exifCopy.XmpCreate(withXmp);
				
			// Now copy content using exifTool
			var updateModel = _readMeta.ReadExifAndXmpFromFile(subPath);
			var comparedNames = exifCopy.CompareAll(updateModel);
			comparedNames.Add(nameof(FileIndexItem.Software));
			updateModel.SetFilePath(subPath);

			// run cmd
			Update(updateModel, comparedNames);

			return withXmp;
		}
		
		
		/// <summary>
		/// To update only on fs
		/// </summary>
		/// <param name="updateModel"></param>
		/// <param name="comparedNames"></param>
		/// <returns></returns>
		public string Update(FileIndexItem updateModel, List<string> comparedNames)
		{
			return UpdateAsyncWrapperLegacy(updateModel, comparedNames).Result;
		}
		
		private async Task<string> UpdateAsyncWrapperLegacy(FileIndexItem updateModel, List<string> comparedNames)
		{
			var task = Task.Run(() => UpdateASyncLegacy(updateModel,comparedNames));
			return task.Wait(TimeSpan.FromSeconds(20)) ? task.Result : string.Empty;
		}
		
			    
		private async Task<string> UpdateASyncLegacy(FileIndexItem updateModel, List<string> comparedNames)
		{
			var command = new ExifToolCmdHelper(_exifTool,_iStorage,_readMeta).ExifToolCommandLineArgs(updateModel, comparedNames);
			var fullFilePath = _appSettings.DatabasePathToFilePath(updateModel.FilePath);
			await _exifTool.WriteLegacyAsync(fullFilePath, command);
			return command;
		}
		
	}
}
