# Dockerfile

# ARM build test: 
# cd /root_of_repo
# docker buildx build --push starsky --tag qdraw/starsky:latest --platform linux/arm64

# docker compose build --progress=plain
# DEBUG Dockerfile:
# export DOCKER_BUILDKIT=0
# cd /root_of_repo
# docker build -f starsky/Dockerfile . --no-cache --build-arg TEST=false

# Stage 1 Front-end
# # docker buildx imagetools inspect node:18-alpine
FROM --platform=$BUILDPLATFORM node:18-alpine as react-build
ARG TARGETPLATFORM
ARG BUILDPLATFORM

WORKDIR /app/starsky/clientapp
ENV CI=true
ENV INLINE_RUNTIME_CHUNK=false
ENV IMAGE_INLINE_SIZE_LIMIT=1
ENV DISABLE_ESLINT_PLUGIN=true
COPY starsky/clientapp/. ./
RUN npm ci --legacy-peer-deps --prefer-offline --no-audit --no-fund
RUN npm run build
RUN echo "react done"

# no alpine build since there is no support for multi-arch
# docker buildx imagetools inspect mcr.microsoft.com/dotnet/sdk:6.0
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env
ARG BUILDPLATFORM
ARG TARGETPLATFORM
# insert demo user and content
ARG ISDEMO=""
ENV E_ISDEMO=$ISDEMO

RUN mkdir -p /app
WORKDIR /app

# copy everything else and build
COPY . ./

WORKDIR /app/starsky

RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
        echo $TARGETPLATFORM ; \
        dotnet restore --runtime linux-x64 starsky.csproj ; \
    elif [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        dotnet restore --runtime linux-arm64 starsky.csproj ; \
    elif [ "$TARGETPLATFORM" = "linux/arm/v7" ]; then \
        dotnet restore --runtime linux-arm starsky.csproj ; \
    else \
        dotnet restore starsky.csproj ; \
    fi

RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
        echo $TARGETPLATFORM ; \
        dotnet publish -c release -o out --runtime linux-x64 --self-contained false --no-restore ; \
    elif [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        dotnet publish -c release -o out --runtime linux-arm64 --self-contained false --no-restore ; \
    elif [ "$TARGETPLATFORM" = "linux/arm/v7" ]; then \
        dotnet publish -c release -o out --runtime linux-arm --self-contained false --no-restore ; \
    else \
       dotnet publish -c release -o out  ; \
    fi

WORKDIR /app

RUN --mount=type=cache,id=dependencies,target=/app/out/dependencies \
    mkdir -p "/app/out/dependencies" && \
    dotnet run --project "/app/starskygeocli/starskygeocli.csproj" --configuration Release -- --dependencies "/app/out/dependencies" -h -v

RUN --mount=type=cache,id=dependencies,target=/app/out/dependencies \
    if [ "$ISDEMO" != "" ]; then \
        # it should cache faster \
        dotnet build starsky/starsky.csproj --configuration Release ;\
        DEMO_SEED_CLI_PATH="/app/starskydemoseedcli/starskydemoseedcli.csproj" ;\
        DEPS_FOLDER="/app/out/dependencies" ;\
        mkdir -p $DEPS_FOLDER ;\
        dotnet run --project $DEMO_SEED_CLI_PATH --configuration Release -- --dependencies $DEPS_FOLDER -h -v ;\
    fi

# no alpine build since there is no support for multi-arch
# docker buildx imagetools inspect mcr.microsoft.com/dotnet/sdk:6.0
FROM --platform=$BUILDPLATFORM build-env AS test
ARG BUILDPLATFORM
ARG TEST=true

WORKDIR /app

RUN if [ "$TEST" = "true" ]; then \
        mkdir -p "/testresults" ;\
        if [ "$BUILDPLATFORM" = "$TARGETPLATFORM" ]; then \
          echo $TEST $BUILDPLATFORM $TARGETPLATFORM ; \
          dotnet test -c release --results-directory /testresults --logger "trx;LogFileName=test_results.trx" --collect:"XPlat Code Coverage" --settings build.vstest.runsettings starskytest/starskytest.csproj ; \
        fi ;\
        touch "/testresults/test.enabled" ;\
    else \
      mkdir -p "/testresults" ;\
      touch "/testresults/test.disabled" ;\
    fi
    
# build runtime image (multiarch)
# docker buildx imagetools inspect mcr.microsoft.com/dotnet/aspnet:3.1
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS release
WORKDIR /app
COPY --from=build-env /app/starsky/out .
COPY --from=react-build /app/starsky/clientapp ./clientapp

# Makes sure the test stage is run when using docker buildkit
COPY --from=test /testresults /tmp

ENV ASPNETCORE_Environment=Production

CMD ASPNETCORE_URLS=http://*:$PORT dotnet starsky.dll
