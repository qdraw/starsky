using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using starsky.foundation.database.Models;
using starsky.foundation.platform.Models;
using starsky.foundation.storage.Services;
using starskytest.FakeCreateAn;


     [TestMethod]
        public void Done___ImportIndexItemParseFileNameTest()
        {
            var createAnImage = new CreateAnImage();

            _appSettings.Structure = "/yyyy/MM/yyyy_MM_dd/yyyyMMdd_HHmmss.ext";

            var importItem = new ImportIndexItem(_appSettings);
            importItem.SourceFullFilePath = createAnImage.FullFilePath;

            var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg);
            Assert.AreEqual("00010101_000000.jpg", fileName);
        }
        
        
        [TestMethod]
        public void Done___ImportIndexItemParseFileNameTest_LotsOfEscapeChars()
        {
	        var createAnImage = new CreateAnImage();

	        _appSettings.Structure = "/yyyy/MM/yyyy_MM_dd/yyyyMMdd_HHmmss_\\\\\\h\\\\\\m.ext";

	        var importItem = new ImportIndexItem(_appSettings);
	        importItem.SourceFullFilePath = createAnImage.FullFilePath;

	        var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg);
	        Assert.AreEqual("00010101_000000_hm.jpg", fileName);
        }

        [TestMethod]
        public void Done__ImportIndexItemParseFileNameTest_StructureIsNull()
        {
	        var createAnImage = new CreateAnImage();

	        var importItem = new ImportIndexItem
	        {
		        SourceFullFilePath = createAnImage.FullFilePath,
		        Structure = null
	        };
	        Assert.AreEqual(null,importItem.Structure);
	        var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg);
	        
	        Assert.AreEqual(null,fileName);
        }

        [TestMethod]
        public void ImportIndexItemParseFileNameTest_FileNameNull()
        {
	        var createAnImage = new CreateAnImage();

	        var importItem = new ImportIndexItem
	        {
		        SourceFullFilePath = createAnImage.FullFilePath,
		        Structure = "*"
	        };
	        var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg);

        }

        [TestMethod]
        public void ParseFileName_SourceFullFilePath_Null()
        {
	        var importItem = new ImportIndexItem {SourceFullFilePath = null};
	        var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg);
			Assert.AreEqual(string.Empty,fileName);
        }

        [TestMethod]
        public void ImportIndexItemParse_FileNameWithAppendix_Test()
        {
            var createAnImage = new CreateAnImageNoExif();

            _appSettings.Structure = "/yyyy/MM/yyyy_MM_dd/yyyyMMdd_HHmmss_\\d.ext"; // <<<----

            var importItem = new ImportIndexItem(_appSettings);
            importItem.SourceFullFilePath = createAnImage.FullFilePathWithDate;
	        importItem.ParseDateTimeFromFileName();
	        
            var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg,false);
            Assert.AreEqual("00010101_000000_d.jpg", fileName);
            
            new StorageHostFullPathFilesystem().FileDelete(importItem.SourceFullFilePath);
        }
        
        	    
	    [TestMethod]
	    public void duplicate__ImportIndexItemParse_FileNameWithAppendixInFileName_Test()
	    {
		    var createAnImage = new CreateAnImageNoExif();

		    var filPathWithAppendix = Path.Join(createAnImage.BasePath,"2018.01.01 02.02.02-test.jpg");
		    if(!File.Exists(filPathWithAppendix)) File.Move(createAnImage.FullFilePathWithDate,filPathWithAppendix);
		    
		    _appSettings.Structure = "/yyyyMMdd_HHmmss_\\d.ext"; // <<<----

		    var importItem = new ImportIndexItem(_appSettings);
		    importItem.SourceFullFilePath = filPathWithAppendix;
		    importItem.ParseDateTimeFromFileName();

		    var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg,false);
		    Assert.AreEqual("20180101_020202_d.jpg", fileName);
            
		    new StorageHostFullPathFilesystem().FileDelete(filPathWithAppendix);
	    }
	    
	            [TestMethod]
                public void ImportIndexItemParse_filenamebase_filename_Test()
                {
                    _appSettings.Structure = "/\\t\\z/\\a\\b{filenamebase}/{filenamebase}.ext";
        
                    var createAnImage = new CreateAnImage();
                    var importItem = new ImportIndexItem(_appSettings);
                    importItem.SourceFullFilePath = createAnImage.FullFilePath;
                    _appSettings.StorageFolder = createAnImage.BasePath;
                    var fileName = importItem.ParseFileName(ExtensionRolesHelper.ImageFormat.jpg);
                    Assert.AreEqual(createAnImage.DbPath.Replace("/",string.Empty),fileName);
                }
                
                
                


        [TestMethod]
        [ExpectedException(typeof(FileNotFoundException))]
        public void ImportIndexItemParse_FileNotExist_Test()
        {
            _appSettings.Structure = "/yyyyMMdd_HHmmss.ext";
            var input = new ImportIndexItem(_appSettings)
            {
                SourceFullFilePath = Path.DirectorySeparatorChar + "20180101_011223.jpg"
            };

            input.ParseFileName(ExtensionRolesHelper.ImageFormat.notfound);
            // ExpectedException
        }
	    
	    
namespace starskytest.starsky.foundation.storage.Services
{
	[TestClass]
	public class StructureServiceTest
	{
		private readonly AppSettings _appSettings;

		public StructureServiceTest()
		{
			_appSettings = new AppSettings();
		}
		
		
		[TestMethod]
		[ExpectedException(typeof(FieldAccessException))]
		public void ImportIndexItem_CtorRequest_ParseSubfolders()
		{
			new StructureService(null,null).ParseSubfolders(true);
		}

		
		[TestMethod]
		public void ImportIndexItemParse_filenamebase_subfolder_Test()
		{
			_appSettings.Structure = "/{filenamebase}/{filenamebase}.ext";
			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			_appSettings.StorageFolder = createAnImage.BasePath;
			var subfolders = importItem.ParseSubfolders(false);
			Assert.AreEqual("/" + createAnImage.DbPath.Replace("/",string.Empty)
				                .Replace(".jpg",string.Empty) + "/",subfolders);
		}
	    
		[TestMethod]
		public void ImportIndexItemParse_xuxuxuxu_subfolder_Test()
		{
			_appSettings.Structure = "/xuxuxuxu_ssHHmm.ext";

			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			_appSettings.StorageFolder = createAnImage.BasePath;
			var subfolders = importItem.ParseSubfolders(false);
			Assert.AreNotEqual(subfolders,"/cs");
			Assert.AreEqual(subfolders,string.Empty);
		}
		
		[TestMethod]
		public void ImportIndexItemParseSubfoldersTest()
		{
			var createAnImage = new CreateAnImage();
			_appSettings.Structure = "/yyyy/MM/yyyy_MM_dd/yyyyMMdd_HHmmss.ext";
			var importItem = new ImportIndexItem(_appSettings);
			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			var s = importItem.ParseSubfolders(false);
			Assert.AreEqual("/0001/01/0001_01_01/",s);
		}

		[TestMethod]
		public void ImportIndexItemParseSubfolders_TRslashABC_Test()
		{
			_appSettings.Structure = "/\\t\\r/\\a\\b\\c/\\t\\e\\s\\t.ext";
			// file.ext is ignored but required
            
			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			var s = importItem.ParseSubfolders(false);
			Assert.AreEqual("/tr/abc/",s);
		}
        
		[TestMethod]
		public void ImportIndexItemParseSubfolders_Tzzz_slashABC_Test()
		{
			_appSettings.Structure = "/\\t\\z/\\a\\b\\c/test.ext";
			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			_appSettings.StorageFolder = createAnImage.BasePath;
			var s = importItem.ParseSubfolders(false);
			Assert.AreEqual("/tz/abc/",s);
		}
	}
}
