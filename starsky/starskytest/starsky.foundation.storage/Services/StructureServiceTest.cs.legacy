using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using starsky.foundation.database.Models;
using starsky.foundation.platform.Models;
using starsky.foundation.storage.Services;
using starskytest.FakeCreateAn;

namespace starskytest.starsky.foundation.storage.Services
{
	[TestClass]
	public class StructureServiceTest
	{
		private readonly AppSettings _appSettings;

		public StructureServiceTest()
		{
			_appSettings = new AppSettings();
		}
		
		
		[TestMethod]
		[ExpectedException(typeof(FieldAccessException))]
		public void ImportIndexItem_CtorRequest_ParseSubfolders()
		{
			new StructureService(null,null).ParseSubfolders(true);
		}

		
		[TestMethod]
		public void ImportIndexItemParse_filenamebase_subfolder_Test()
		{
			_appSettings.Structure = "/{filenamebase}/{filenamebase}.ext";
			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			_appSettings.StorageFolder = createAnImage.BasePath;
			var subfolders = importItem.ParseSubfolders(false);
			Assert.AreEqual("/" + createAnImage.DbPath.Replace("/",string.Empty)
				                .Replace(".jpg",string.Empty) + "/",subfolders);
		}
	    
		[TestMethod]
		public void ImportIndexItemParse_xuxuxuxu_subfolder_Test()
		{
			_appSettings.Structure = "/xuxuxuxu_ssHHmm.ext";

			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			_appSettings.StorageFolder = createAnImage.BasePath;
			var subfolders = importItem.ParseSubfolders(false);
			Assert.AreNotEqual(subfolders,"/cs");
			Assert.AreEqual(subfolders,string.Empty);
		}
		
		[TestMethod]
		public void ImportIndexItemParseSubfoldersTest()
		{
			var createAnImage = new CreateAnImage();
			_appSettings.Structure = "/yyyy/MM/yyyy_MM_dd/yyyyMMdd_HHmmss.ext";
			var importItem = new ImportIndexItem(_appSettings);
			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			var s = importItem.ParseSubfolders(false);
			Assert.AreEqual("/0001/01/0001_01_01/",s);
		}

		[TestMethod]
		public void ImportIndexItemParseSubfolders_TRslashABC_Test()
		{
			_appSettings.Structure = "/\\t\\r/\\a\\b\\c/\\t\\e\\s\\t.ext";
			// file.ext is ignored but required
            
			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			var s = importItem.ParseSubfolders(false);
			Assert.AreEqual("/tr/abc/",s);
		}
        
		[TestMethod]
		public void ImportIndexItemParseSubfolders_Tzzz_slashABC_Test()
		{
			_appSettings.Structure = "/\\t\\z/\\a\\b\\c/test.ext";
			var createAnImage = new CreateAnImage();
			var importItem = new ImportIndexItem(_appSettings);

			importItem.SourceFullFilePath = createAnImage.FullFilePath;
			_appSettings.StorageFolder = createAnImage.BasePath;
			var s = importItem.ParseSubfolders(false);
			Assert.AreEqual("/tz/abc/",s);
		}
	}
}
