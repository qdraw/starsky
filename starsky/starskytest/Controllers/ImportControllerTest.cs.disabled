using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Routing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Primitives;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using starsky.Controllers;
using starsky.Helpers;
using starskycore.Data;
using starskycore.Helpers;
using starskycore.Interfaces;
using starskycore.Models;
using starskycore.Services;
using starskytest.FakeMocks;

namespace starskytest.Controllers
{

    [TestClass]
    public class ImportControllerTest
    {
        private readonly IImport _import;
        private readonly ImportController _importController;
        private IBackgroundTaskQueue _bgTaskQueue;
        private IServiceScopeFactory _scopeFactory;

        public ImportControllerTest()
        {
            var provider = new ServiceCollection()
                .AddMemoryCache()
                .BuildServiceProvider();
            
            var memoryCache = provider.GetService<IMemoryCache>();

            var builder = new DbContextOptionsBuilder<ApplicationDbContext>();
            builder.UseInMemoryDatabase("test");
            var options = builder.Options;
            var context = new ApplicationDbContext(options);
            
            var services = new ServiceCollection();
            
            // Add Background services
            services.AddSingleton<IHostedService, BackgroundQueuedHostedService>();
            services.AddSingleton<IBackgroundTaskQueue, BackgroundTaskQueue>();
            
            var serviceProvider = services.BuildServiceProvider();


            
            // get the background helper
            _bgTaskQueue = serviceProvider.GetRequiredService<IBackgroundTaskQueue>();
            
            _import = new FakeIImport();
            // IImport import, AppSettings appSettings, 
//            IServiceScopeFactory scopeFactory, IBackgroundTaskQueue queue, 
//            HttpClientHelper httpClientHelper, IStorage iStorage
	        _scopeFactory = serviceProvider.GetRequiredService<IServiceScopeFactory>();

//            _importController = new ImportController(_import, new AppSettings(), _scopeFactory,_bgTaskQueue,null,new FakeIStorage())
//            {
//	            ControllerContext = {HttpContext = new DefaultHttpContext()}
//            };
        }

        private static MultipartFormDataContent CreateFakeMultiPartFormData()
        {
	        byte[] data = { 1, 2, 3, 4, 5 };
	        ByteArrayContent byteContent = new ByteArrayContent(data);
	        StringContent stringContent = new StringContent(
		        "blah blah",
		        System.Text.Encoding.UTF8);

	        MultipartFormDataContent multipartContent = new MultipartFormDataContent { byteContent, stringContent };
	        return multipartContent;
        }
        
        //Add the file in the underlying request object.
        private ControllerContext RequestWithFile()
        {
	        
	        var httpContext = new DefaultHttpContext();
	        httpContext.Request.Headers.Add("Content-Type", "multipart/form-data; boundary=\"-----------------------------70143061614066247291641834127\"");



//	        var text = "-----------------------------70143061614066247291641834127\n" +
//	                   "Content-Disposition: form-data; name=\"files\"; filename=\"anp-52220411.jpg\"\n" +
//	                   "Content-Type: image/jpeg\n" +
//	                   "yolo\n" +
//	                   "-----------------------------70143061614066247291641834127--";

	        var text = "skdfnlsdflksd\n-----------------------------70143061614066247291641834127--";
	        httpContext.Request.Headers.Add("Content-Length", text.Length.ToString());
	        var file = new FormFile(new MemoryStream(Encoding.UTF8.GetBytes(text)), 0, text.Length, "files", "dummy.txt");

	        
//	        httpContext.Request.Form = new FormCollection(new Dictionary<string, StringValues>(), new FormFileCollection { file });
	        httpContext.Request.Body = file.OpenReadStream();
	        
	        var actx = new ActionContext(httpContext, new RouteData(), new ControllerActionDescriptor());
	        return new ControllerContext(actx);
        }
        
        [TestMethod]
        public async Task Test()
        {
	        // new MemoryStream(FakeCreateAn.CreateAnImage.Bytes)
	        var importController = new ImportController(_import, new AppSettings(), _scopeFactory,
		        _bgTaskQueue, null, new FakeIStorage())
	        {
		        Request =
		        {
			        
		        }
	        };

	        
	        await importController.IndexPost();
        }



    }
}
